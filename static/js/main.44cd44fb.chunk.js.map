{"version":3,"sources":["../../UT BOOTCAMP/homework/Clicky-game/clicky-game/src/images/1.jpg","../../UT BOOTCAMP/homework/Clicky-game/clicky-game/src/images/2.jpg","../../UT BOOTCAMP/homework/Clicky-game/clicky-game/src/images/3.jpeg","../../UT BOOTCAMP/homework/Clicky-game/clicky-game/src/images/4.jpg","../../UT BOOTCAMP/homework/Clicky-game/clicky-game/src/images/5.jpg","../../UT BOOTCAMP/homework/Clicky-game/clicky-game/src/images/6.jpg","../../UT BOOTCAMP/homework/Clicky-game/clicky-game/src/images/7.jpg","../../UT BOOTCAMP/homework/Clicky-game/clicky-game/src/images/8.jpg","../../UT BOOTCAMP/homework/Clicky-game/clicky-game/src/images/9.jpg","../../UT BOOTCAMP/homework/Clicky-game/clicky-game/src/components/TomatoCard.js","../../UT BOOTCAMP/homework/Clicky-game/clicky-game/src/components/Wrapper/index.js","../../UT BOOTCAMP/homework/Clicky-game/clicky-game/src/components/Title/index.js","../../UT BOOTCAMP/homework/Clicky-game/clicky-game/src/images/index.js","../../UT BOOTCAMP/homework/Clicky-game/clicky-game/src/App.js","../../UT BOOTCAMP/homework/Clicky-game/clicky-game/src/serviceWorker.js","../../UT BOOTCAMP/homework/Clicky-game/clicky-game/src/index.js"],"names":["module","exports","__webpack_require__","p","TomatoCard","props","react_default","a","createElement","className","onClick","comboFunction","id","alt","name","src","image","Wrapper","children","Title","tomatoes","one","two","three","four","five","six","seven","eight","nine","App","state","count","shuffle","i","length","j","Math","floor","random","_ref","shuffleTomatoes","console","log","shuffledTomatoes","_this","slice","setState","handleIncrement","handleClick","this","clicked","_this2","components_Wrapper","components_Title","map","tomato","components_TomatoCard","key","clickedTomato","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,+CCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,+CCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,gDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,+CCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,+CCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,+CCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,+CCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,+CCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0QCazBC,MAVf,SAAoBC,GAClB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OAAOC,QAAS,kBAAML,EAAMM,cAAcN,EAAMO,MAC7DN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,iBCA1BC,MAJf,SAAiBZ,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMa,iBCG1BC,MAJf,SAAed,GACb,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAMa,gKCiDvBE,EA1CE,CACZ,CACER,GAAM,EACNI,MAASK,KAEX,CACET,GAAM,EACNI,MAASM,KAEX,CACEV,GAAM,EACNI,MAASO,KAEX,CACEX,GAAM,EACNI,MAASQ,KAEX,CACEZ,GAAM,EACNI,MAASS,KAGX,CACEb,GAAM,EACNI,MAASU,KAGX,CACEd,GAAM,EACNI,MAASW,KAGX,CACEf,GAAM,EACNI,MAASY,KAEX,CACEhB,GAAM,EACNI,MAASa,MCyBDC,6MAlEbC,MAAQ,CACNX,WACAY,MAAO,KAKTC,QAAU,SAAA1B,GACR,IAAK,IAAI2B,EAAI3B,EAAE4B,OAAS,EAAGD,EAAI,EAAGA,IAAK,CACnC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADPM,EAEpB,CAACjC,EAAE6B,GAAI7B,EAAE2B,IAAvB3B,EAAE2B,GAFgCM,EAAA,GAE5BjC,EAAE6B,GAF0BI,EAAA,GAIvC,OAAOjC,KAGTkC,gBAAkB,WAChBC,QAAQC,IAAI,eAEZ,IAAMC,EAAmBC,EAAKZ,QAAQY,EAAKd,MAAMX,SAAS0B,SAE1DD,EAAKE,SAAS,CAAE3B,SAAUwB,OAa5BI,gBAAkB,SAACpC,GACjB8B,QAAQC,IAAI/B,GACZiC,EAAKE,SAAS,CAAEf,MAAOa,EAAKd,MAAMC,MAAQ,OAG5CrB,cAAgB,SAACC,GACfiC,EAAKG,gBAAgBpC,GACrBiC,EAAKI,YAAYrC,GACjBiC,EAAKJ,8FAdK7B,GACPA,GACHsC,KAAKH,SAAS,CAAEI,SAAS,IACzBT,QAAQC,IAAI,mDAeL,IAAAS,EAAAF,KACP,OACE5C,EAAAC,EAAAC,cAAC6C,EAAD,KACA/C,EAAAC,EAAAC,cAAC8C,EAAD,wBACAhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,gBAAuCyC,KAAKnB,MAAMC,QAEnDkB,KAAKnB,MAAMX,SAASmC,IAAI,SAAAC,GAAM,OAC7BlD,EAAAC,EAAAC,cAACiD,EAAD,CACE7C,GAAI4C,EAAO5C,GACX8C,IAAKF,EAAO5C,GACZI,MAAOwC,EAAOxC,MACdL,cAAeyC,EAAKzC,cACpBgD,cAAeH,EAAOL,oBA5DhBS,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.44cd44fb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/1.f819993c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.50edc339.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.8696741e.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/4.411aa6ca.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5.3ecc74fe.jpg\";","module.exports = __webpack_public_path__ + \"static/media/6.de3c3d2a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/7.4a232a29.jpg\";","module.exports = __webpack_public_path__ + \"static/media/8.9ff5148d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/9.989eb88a.jpg\";","import React from \"react\";\nimport \"./tomatoCardStyles.css\";\n\nfunction TomatoCard(props) {\n  return (\n    <div className=\"card\" onClick={() => props.comboFunction(props.id)}>\n      <div className=\"img-container\">\n        <img alt={props.name} src={props.image} />\n      </div>\n    </div>\n  );\n}\n\nexport default TomatoCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import one from './1.jpg';\nimport two from './2.jpg';\nimport three from './3.jpeg';\nimport four from './4.jpg';\nimport five from './5.jpg';\nimport six from './6.jpg';\nimport seven from './7.jpg';\nimport eight from './8.jpg';\nimport nine from './9.jpg';\n\n/* eslint-disable no-unused-expressions */\nconst tomatoes = [\n     {\n       \"id\": 1,\n       \"image\": one,\n     },\n     {\n       \"id\": 2,\n       \"image\": two,     \n     },\n     {\n       \"id\": 3,\n       \"image\": three,  \n     },\n     {\n       \"id\": 4,\n       \"image\": four,\n     },\n     {\n       \"id\": 5,\n       \"image\": five,\n\n     },\n     {\n       \"id\": 6,\n       \"image\": six,\n\n     },\n     {\n       \"id\": 7,\n       \"image\": seven,\n\n     },\n     {\n       \"id\": 8,\n       \"image\": eight,\n     },\n     {\n       \"id\": 9,\n       \"image\": nine,\n     }\n];\n  \nexport default tomatoes;\n","import React, { Component } from \"react\";\nimport TomatoCard from \"./components/TomatoCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport tomatoes from \"./images\";\n\nclass App extends Component {\n  // Setting this.state.tomatoes to the tomatoes array\n  state = {\n    tomatoes,\n    count: 0\n  };\n  \n\n  // Shuffle functions\n  shuffle = a => {\n    for (let i = a.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [a[i], a[j]] = [a[j], a[i]];\n    }\n    return a;\n  }\n\n  shuffleTomatoes = () => {\n    console.log(\"shuffflleee\")\n    // Filter this.state.friends for friends with an id not equal to the id being removed\n    const shuffledTomatoes = this.shuffle(this.state.tomatoes.slice());\n    // Set this.state.friends equal to the new friends array\n    this.setState({ tomatoes: shuffledTomatoes });\n  };\n\n\n\n  // Scoring function\n\n  handleClick(id) {\n    if(id )\n    this.setState({ clicked: true})\n    console.log(\"button clicked\")\n  }\n\n  handleIncrement = (id) => {\n    console.log(id)\n    this.setState({ count: this.state.count + 1 });\n  };\n\n  comboFunction = (id) => {\n    this.handleIncrement(id);\n    this.handleClick(id);\n    this.shuffleTomatoes();\n  }\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n      <Title>Clicky Tomatoes</Title>\n      <div className=\"card-body\">\n          <p className=\"card-text\">Click Count: {this.state.count}</p>\n      </div>\n        {this.state.tomatoes.map(tomato => (\n          <TomatoCard\n            id={tomato.id}\n            key={tomato.id}\n            image={tomato.image}\n            comboFunction={this.comboFunction}\n            clickedTomato={tomato.clicked}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n\n\n/*****\n1. We want to hold a counter in our componentâ€™s state just like we hold the tomato list\n2. We want to create a function in the same component that when called, calls this.setState and updates our counter\n3. We want to probably pass this function to each TomatoCard like we do with the shuffle function\n4. We want to run this function every time we click on a card, just like we do with the shuffle function!\nOh and 5. You want to render the counter somewhere on the page so you can see the counter updating :]\n */","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}